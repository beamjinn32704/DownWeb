
import javax.swing.JScrollPane;

/*
* To change this license header, choose License Headers in Project Properties.
* To change this template file, choose Tools | Templates
* and open the template in the editor.
*/

/**
 *
 * @author beamj
 */
public class ProcessConfigScrollPane extends JScrollPane {
    
    private ProcessConfigModel model;
    
    /**
     * Creates new form ProcessConfigScrollPane
     */
    public ProcessConfigScrollPane() {
        //Create a new model, add a default config to it and set the default config as the selected item
        model = new ProcessConfigModel();
        
        //Create a fake process config for testing
        ProcessConfig test = new ProcessConfig("TEST", true, true);
        test.addFileTypeToDownload(FileType.MP4);
        test.addFileTypeNotToDownload(FileType.BITMAP);
        model.addConfig(test);
        
        initComponents();
        
        //Perform startup configurations
        startup();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileTypesButtonGroup = new javax.swing.ButtonGroup();
        processDownloadsButtonGroup = new javax.swing.ButtonGroup();
        fileTypeUseButtonGroup = new javax.swing.ButtonGroup();
        processConfigPanel = new javax.swing.JPanel();
        selectBox = new javax.swing.JComboBox<>();
        nameLabel = new javax.swing.JLabel();
        nameField = new javax.swing.JTextField();
        fileTypeEditPanel = new javax.swing.JPanel();
        fileExtInputLabel = new javax.swing.JLabel();
        fileTypeDeleteButton = new javax.swing.JButton();
        fileExtInputField = new javax.swing.JTextField();
        fileTypeNewButton = new javax.swing.JButton();
        fileTypeSystemLabel = new javax.swing.JLabel();
        fileTypeSystemBox = new javax.swing.JComboBox<>();
        fileTypeUseSystemButton = new javax.swing.JRadioButton();
        fileTypeUseFileExtButton = new javax.swing.JRadioButton();
        fileTypeSelectionPanel = new javax.swing.JPanel();
        fileTypesDownloadButton = new javax.swing.JRadioButton();
        fileTypesNoDownloadButton = new javax.swing.JRadioButton();
        fileTypesDownloadBox = new javax.swing.JComboBox<>();
        fileTypesNoDownloadBox = new javax.swing.JComboBox<>();
        processTypePanel = new javax.swing.JPanel();
        processDownloadButton = new javax.swing.JRadioButton();
        noProcessDownloadButton = new javax.swing.JRadioButton();
        saveButton = new javax.swing.JButton();
        newButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();

        selectBox.setModel(model);

        nameLabel.setText("Configuration Name:");

        fileTypeEditPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Add and Edit File Types", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP));

        fileExtInputLabel.setText("File Extension:");

        fileTypeDeleteButton.setText("Delete File Type");

        fileTypeNewButton.setText("Create New File Type");

        fileTypeSystemLabel.setText("Choose a System File Type:");

        fileTypeSystemBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        fileTypeUseButtonGroup.add(fileTypeUseSystemButton);
        fileTypeUseSystemButton.setSelected(true);
        fileTypeUseSystemButton.setText("Use System File Type");

        fileTypeUseButtonGroup.add(fileTypeUseFileExtButton);
        fileTypeUseFileExtButton.setText("Use File Extension");

        javax.swing.GroupLayout fileTypeEditPanelLayout = new javax.swing.GroupLayout(fileTypeEditPanel);
        fileTypeEditPanel.setLayout(fileTypeEditPanelLayout);
        fileTypeEditPanelLayout.setHorizontalGroup(
            fileTypeEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fileTypeEditPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(fileTypeEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(fileTypeEditPanelLayout.createSequentialGroup()
                        .addComponent(fileTypeUseSystemButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(fileTypeUseFileExtButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, fileTypeEditPanelLayout.createSequentialGroup()
                        .addComponent(fileExtInputLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fileExtInputField))
                    .addComponent(fileTypeDeleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(fileTypeNewButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(fileTypeEditPanelLayout.createSequentialGroup()
                        .addComponent(fileTypeSystemLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fileTypeSystemBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        fileTypeEditPanelLayout.setVerticalGroup(
            fileTypeEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fileTypeEditPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(fileTypeEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fileTypeSystemLabel)
                    .addComponent(fileTypeSystemBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(fileTypeEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fileExtInputLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(fileExtInputField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(fileTypeEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fileTypeUseSystemButton)
                    .addComponent(fileTypeUseFileExtButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(fileTypeNewButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fileTypeDeleteButton)
                .addGap(5, 5, 5))
        );

        fileTypesButtonGroup.add(fileTypesDownloadButton);
        fileTypesDownloadButton.setSelected(true);
        fileTypesDownloadButton.setText("File Types to Download");
        fileTypesDownloadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileTypesDownloadButtonActionPerformed(evt);
            }
        });

        fileTypesButtonGroup.add(fileTypesNoDownloadButton);
        fileTypesNoDownloadButton.setText("File Types Not to Download");
        fileTypesNoDownloadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileTypesNoDownloadButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout fileTypeSelectionPanelLayout = new javax.swing.GroupLayout(fileTypeSelectionPanel);
        fileTypeSelectionPanel.setLayout(fileTypeSelectionPanelLayout);
        fileTypeSelectionPanelLayout.setHorizontalGroup(
            fileTypeSelectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fileTypeSelectionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(fileTypeSelectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(fileTypesDownloadButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(fileTypesNoDownloadButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(fileTypeSelectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(fileTypeSelectionPanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(fileTypesNoDownloadBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(fileTypeSelectionPanelLayout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(fileTypesDownloadBox, 0, 220, Short.MAX_VALUE)))
                .addContainerGap())
        );
        fileTypeSelectionPanelLayout.setVerticalGroup(
            fileTypeSelectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fileTypeSelectionPanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(fileTypeSelectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fileTypesDownloadButton)
                    .addComponent(fileTypesDownloadBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(fileTypeSelectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fileTypesNoDownloadButton)
                    .addComponent(fileTypesNoDownloadBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0))
        );

        processDownloadsButtonGroup.add(processDownloadButton);
        processDownloadButton.setSelected(true);
        processDownloadButton.setText("Process Downloads");
        processDownloadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processDownloadButtonActionPerformed(evt);
            }
        });

        processDownloadsButtonGroup.add(noProcessDownloadButton);
        noProcessDownloadButton.setText("Don't Process Downloads");
        noProcessDownloadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noProcessDownloadButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout processTypePanelLayout = new javax.swing.GroupLayout(processTypePanel);
        processTypePanel.setLayout(processTypePanelLayout);
        processTypePanelLayout.setHorizontalGroup(
            processTypePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(processTypePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(processTypePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(noProcessDownloadButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(processDownloadButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        processTypePanelLayout.setVerticalGroup(
            processTypePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(processTypePanelLayout.createSequentialGroup()
                .addComponent(processDownloadButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addComponent(noProcessDownloadButton)
                .addGap(0, 0, 0))
        );

        saveButton.setText("Save Configuration");

        newButton.setText("Create New Processing Configuration");

        deleteButton.setText("Delete Processing Configuration");

        javax.swing.GroupLayout processConfigPanelLayout = new javax.swing.GroupLayout(processConfigPanel);
        processConfigPanel.setLayout(processConfigPanelLayout);
        processConfigPanelLayout.setHorizontalGroup(
            processConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, processConfigPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(processConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(saveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(deleteButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(newButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(fileTypeEditPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, processConfigPanelLayout.createSequentialGroup()
                        .addComponent(processTypePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(16, 16, 16)
                        .addComponent(fileTypeSelectionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(selectBox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, processConfigPanelLayout.createSequentialGroup()
                        .addComponent(nameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nameField)))
                .addContainerGap())
        );
        processConfigPanelLayout.setVerticalGroup(
            processConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(processConfigPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(selectBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(processConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameLabel)
                    .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addGroup(processConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fileTypeSelectionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(processTypePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fileTypeEditPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(newButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(saveButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setViewportView(processConfigPanel);
    }// </editor-fold>//GEN-END:initComponents
    
    private void processDownloadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processDownloadButtonActionPerformed
        //Enable file extension specifics when we can process the urls
        
    }//GEN-LAST:event_processDownloadButtonActionPerformed
    
    private void noProcessDownloadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noProcessDownloadButtonActionPerformed
        //If there's no processing, there doesn't need to be any processing specifics
        
    }//GEN-LAST:event_noProcessDownloadButtonActionPerformed

    private void fileTypesDownloadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileTypesDownloadButtonActionPerformed
        //Enable the file types to download GUI
        
    }//GEN-LAST:event_fileTypesDownloadButtonActionPerformed

    private void fileTypesNoDownloadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileTypesNoDownloadButtonActionPerformed
        //Disable the file types to download GUI
        
    }//GEN-LAST:event_fileTypesNoDownloadButtonActionPerformed

    /**
     * Toggles whether the button that creates new file types is enabled.
     * @param enable whether to enable or disable
     */
    public void enableFileTypeNewButton(boolean enable){
        fileTypeNewButton.setEnabled(enable);
    }
    
    /**
     * Toggles whether the button that creates new configurations is enabled.
     * @param enable whether to enable or disable
     */
    public void enableConfigNewButton(boolean enable){
        newButton.setEnabled(enable);
    }
    
    /**
     * Toggles whether the box that contains the file types to download is enabled.
     * @param enable whether to enable or disable
     */
    public void enableFileTypesDownloadBox(boolean enable){
        fileTypesDownloadBox.setEnabled(enable);
    }
    
    /**
     * Toggles whether the box that contains the file types not to download is enabled.
     * @param enable whether to enable or disable
     */
    public void enableFileTypesNoDownloadBox(boolean enable){
        fileTypesNoDownloadBox.setEnabled(enable);
    }
    
    /**
     * Toggles whether the panel that contains the boxes that contain 
     * file types to download and not to download is enabled.
     * @param enable whether to enable or disable
     */
    public void enableFileTypeSelectionPanel(boolean enable){
        //Toggles the enablement of everything inside the file type selection panel
        fileTypeSelectionPanel.setEnabled(enable);
        GuiUtil.enableChildren(fileTypeSelectionPanel, enable, true);
    }
    
    /**
     * Toggles whether the panel that edits the file type configurations is enabled.
     * @param enable whether to enable or disable
     */
    public void enableFileTypeEditPanel(boolean enable){
        //Toggles the enablement of everything inside the file type edit panel
        fileTypeEditPanel.setEnabled(enable);
        GuiUtil.enableChildren(fileTypeEditPanel, enable, true);
    }
    
    /**
     * Toggles whether this whole form is enabled.
     * @param enable whether to enable or disable
     */
    public void enableEverything(boolean enable){
        //Toggles the enablement of everything
        GuiUtil.enableChildren(this, enable, true);
    }
    
    /**
     * Toggles whether the GUI that allows the user to type in a file extension for a file type is enabled.
     * @param enable whether to enable or disable
     */
    public void enableUseFileExtension(boolean enable){
        //Toggles enablement of fileExt label and fileExt field
        fileExtInputField.setEnabled(enable);
        fileExtInputLabel.setEnabled(enable);
    }
    
    /**
     * Toggles whether the GUI that allows the user to use a system file type is enabled.
     * @param enable whether to enable or disable
     */
    public void enableUseSystemFileType(boolean enable){
        //Toggles enablement of system file type label and field
        fileTypeSystemBox.setEnabled(enable);
        fileTypeSystemLabel.setEnabled(enable);
    }
    
    /**
     * Enables and disables the system file type GUI and the file extension GUI based on whether 
     * use is true or false (if true, enable file extension and disable system file type; if false, vice versa).
     * @param use 
     */
    public void useFileExtension(boolean use){
        //Either file extension has to be enabled and system file type has to be disabled or vice versa
        enableUseFileExtension(use);
        enableUseSystemFileType(!use);
    }
    
    /**
     * Performs the initial configurations and enabling of this object.
     */
    private void startup(){
        //Adjust the vertical scroll bar speeds
        getVerticalScrollBar().setUnitIncrement(16);
        getHorizontalScrollBar().setUnitIncrement(16);
        if(model.getSize() != 0){
            //If there is at least one configuration, make sure select box's selected config is the first one
            selectBox.setSelectedIndex(0);
        }
        //Reset GUI based on config values
        reset();
    }
    
    /**
     * Returns the selected configuration.
     * @return the selected configuration
     */
    private ProcessConfig getSelectedConfig(){
        //If there aren't any configs, return null
        if(model.getSize() == 0){
            return null;
        }
        //Get the index of the configuration selected.
        int configInd = selectBox.getSelectedIndex();
        if(configInd == -1){
            //Make sure the select box has selected a configuration
            selectBox.setSelectedIndex(0);
            configInd = 0;
        }
        
        //return selected config
        return model.getElementAt(configInd);
    }
    
    /**
     * Based on which configuration is chosen (and if there are any configurations in the first place), this function
     * changes the values of the GUI to match which configuration is selected. This includes enabling and disabling certain GUI
     * to match the values of the configuration (config) chosen. If there aren't any configs, then this function will disable the
     * neccesary GUI to match that.
     */
    private void reset(){
        //Start off enablement by enabling everything
        enableEverything(true);
        if(model.getSize() == 0){
            //If config list is empty, disable everything and enable new config button
            enableEverything(false);
            enableConfigNewButton(true);
            return;
        }
        
        //Update the GUI based off of the selected config
        updateGUI(getSelectedConfig());
    }
    
    /**
     * Update the GUI based on the configuration passed in.
     * @param config the configuration to base the GUI off of
     */
    private void updateGUI(ProcessConfig config){
        updateGUIValues(config);
        updateGUIEnablement(config);
    }
    
    /**
     * Updates the values (text, whether a button is selected, etc) of the GUI based on config.
     * @param config the processing configuration whose values are used to update the GUI's values
     */
    private void updateGUIValues(ProcessConfig config){
        //Update name field to config name
        nameField.setText(config.getName());
        
        //Update the corresponding file type models to the config's models
        fileTypesDownloadBox.setModel(config.getFileTypesToDownload());
        fileTypesNoDownloadBox.setModel(config.getFileTypesNotToDownload());
        
        //Select and de-select processing download buttons based on whether
        //the config processes downloads
        boolean processesDownloads = config.processesDownloads();
        processDownloadButton.setSelected(processesDownloads);
        noProcessDownloadButton.setSelected(!processesDownloads);
        
        //Select and de-select file type download buttons based on whether
        //the config check file types not to download or to download
        boolean checkFileTypesToDown = config.checkFileTypesToDownload();
        fileTypesDownloadButton.setSelected(checkFileTypesToDown);
        fileTypesNoDownloadButton.setSelected(!checkFileTypesToDown);
        
        //Set the models of the file type download boxes
        FileTypeModel fileTypesToDownModel = config.getFileTypesToDownload();
        fileTypesDownloadBox.setModel(fileTypesToDownModel);
        //Make sure file types download box's index is at 0 if there is a file type
        if(fileTypesToDownModel.getSize() != 0){
            fileTypesDownloadBox.setSelectedIndex(0);
        }
        
        FileTypeModel fileTypesNotToDownModel = config.getFileTypesNotToDownload();
        fileTypesNoDownloadBox.setModel(fileTypesNotToDownModel);
        //Make sure file types no download box's index is at 0 if there is a file type
        if(fileTypesNotToDownModel.getSize() != 0){
            fileTypesNoDownloadBox.setSelectedIndex(0);
        }
        
        FileTypeModel fileTypeModel;
        if(checkFileTypesToDown){
            fileTypeModel = fileTypesToDownModel;
        } else {
            fileTypeModel = fileTypesNotToDownModel;
        }
        
        Object selectedFileTypeObj = fileTypeModel.getSelectedItem();
        if(selectedFileTypeObj != null){
            FileType selectedFileType = (FileType)selectedFileTypeObj;
            fileExtInputField.setText(selectedFileType.getFileExtension(0));
        }
    }
    
    /**
     * Updates which parts of the GUI should be enabled and disabled based on config.
     * @param config the processing configuration whose values are used to update the GUI's enablement
     */
    private void updateGUIEnablement(ProcessConfig config){
        
        //Set whether file extension GUI and whether system file type GUI is enabled and disabled based on whether
        //the use file extension button is selected.
        useFileExtension(fileTypeUseFileExtButton.isSelected());
        
        boolean processesDownloads = config.processesDownloads();
        boolean checkFileTypesToDown = config.checkFileTypesToDownload();
        
        if(!processesDownloads){
            //If don't process downloads, disable file type selection and edit panels
            enableFileTypeSelectionPanel(false);
            enableFileTypeEditPanel(false);
            return;
        }
        
        FileTypeModel fileTypeModel;
        
        if(checkFileTypesToDown){
            //If we have a list of file types to download, disable
            //file types not to download and set the file type model to the
            //file types to download
            enableFileTypesNoDownloadBox(false);
            fileTypeModel = config.getFileTypesToDownload();
        } else {
            //If we have a list of file types not to download, disable
            //file types to download and set the file type model to the
            //file types not to download
            enableFileTypesDownloadBox(false);
            fileTypeModel = config.getFileTypesNotToDownload();
        }
        
        if(fileTypeModel.getSize() == 0){
            //If the file type model has no file types, disable the
            //file type edit panel and enable the new file type button.
            enableFileTypeEditPanel(false);
            enableFileTypeNewButton(true);
        }
    }
    
//    //Set the vertical bar.
//    JScrollBar vertBar = nrhListScrollPane.getVerticalScrollBar();
//
//    //See if the scroll is at the top and the user was scrolling to the top.
//    boolean scrollUpToTop = vertBar.getValue() == vertBar.getMinimum() && evt.getPreciseWheelRotation() < 0;
//    //See if the scroll is at the bottom and the user was scrolling to the bottom.
//    boolean scrollDownToBottom = isScrollAtBottom(vertBar) && evt.getPreciseWheelRotation() > 0;
//    boolean isAtTopOrBottom = scrollDownToBottom || scrollUpToTop;
//    if(isAtTopOrBottom){
//    scrollConfigScrollBar(evt, editProcessConfigPane);
//    }
//    
//    /**
//     * Take the mouse wheel event given to scroll the config scroll bar.
//     * @param evt the mouse wheel event
//      */
//     private void scrollConfigScrollBar(MouseWheelEvent evt, JScrollPane scrollPane){
//        JScrollBar bar = scrollPane.getVerticalScrollBar();       
//        //If the user scrolls down the the direction is positive.
//        //Else, it's negative
//        boolean scrollDown = evt.getWheelRotation() > 0;
//        int direction = -1;
//        if(scrollDown){
//            direction = 1;
//        }
//        
//        //Scroll up or down based on the direction.
//        //Scroll with different values since the mouse event might be a unit scroll or a block scroll.
//        double valToAdd;
//        if(evt.getScrollType() == MouseWheelEvent.WHEEL_BLOCK_SCROLL){
//            valToAdd = (double)bar.getValue() + (double)evt.getPreciseWheelRotation() * 
//                    (double)direction * (double)bar.getBlockIncrement(direction);
//        } else {
//            valToAdd = (double)bar.getValue() + (double)evt.getUnitsToScroll() * 
//                    (double)bar.getUnitIncrement(direction);
//        }
//        
//        
//        //Don't scroll too up or down
//        if(direction < 0){
//            bar.setValue((int)Math.max(valToAdd, bar.getMinimum()));
//        } else {
//            bar.setValue((int)Math.min(valToAdd, bar.getMaximum()));
//        }
//    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton deleteButton;
    private javax.swing.JTextField fileExtInputField;
    private javax.swing.JLabel fileExtInputLabel;
    private javax.swing.JButton fileTypeDeleteButton;
    private javax.swing.JPanel fileTypeEditPanel;
    private javax.swing.JButton fileTypeNewButton;
    private javax.swing.JPanel fileTypeSelectionPanel;
    private javax.swing.JComboBox<String> fileTypeSystemBox;
    private javax.swing.JLabel fileTypeSystemLabel;
    private javax.swing.ButtonGroup fileTypeUseButtonGroup;
    private javax.swing.JRadioButton fileTypeUseFileExtButton;
    private javax.swing.JRadioButton fileTypeUseSystemButton;
    private javax.swing.ButtonGroup fileTypesButtonGroup;
    private javax.swing.JComboBox<FileType> fileTypesDownloadBox;
    private javax.swing.JRadioButton fileTypesDownloadButton;
    private javax.swing.JComboBox<FileType> fileTypesNoDownloadBox;
    private javax.swing.JRadioButton fileTypesNoDownloadButton;
    private javax.swing.JTextField nameField;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JButton newButton;
    private javax.swing.JRadioButton noProcessDownloadButton;
    private javax.swing.JPanel processConfigPanel;
    private javax.swing.JRadioButton processDownloadButton;
    private javax.swing.ButtonGroup processDownloadsButtonGroup;
    private javax.swing.JPanel processTypePanel;
    private javax.swing.JButton saveButton;
    private javax.swing.JComboBox<ProcessConfig> selectBox;
    // End of variables declaration//GEN-END:variables
}